// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-1.0.x"]
  output        = "./generated/client"
}

datasource db {
  provider          = "mysql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

enum MessageType {
  Text
  Animation
  Audio
  Document
  Sticker
  Video
  Photo
  Other
}

enum ChatType {
  Private
  Group
  Supergroup
  Channel
}

model Completion {
  id                Int      @id @default(autoincrement())
  completion_id     String
  date              Int
  model             String
  finish_reason     String
  prompt_tokens     Int
  completion_tokens Int
  content           String   @db.Text
  message           Message  @relation(fields: [chat_id, bot_id, message_id], references: [chat_id, bot_id, message_id])
  chat              Chat     @relation(fields: [chat_id, bot_id], references: [chat_id, bot_id])
  message_id        BigInt
  chat_id           BigInt
  bot_id            BigInt
  created_at        DateTime @default(now())

  @@unique([completion_id])
  @@index([chat_id, bot_id, message_id])
}

model Message {
  id                  Int          @id @default(autoincrement())
  message_id          BigInt
  user                User         @relation(fields: [user_id], references: [user_id])
  user_id             BigInt
  chat                Chat         @relation(fields: [chat_id, bot_id], references: [chat_id, bot_id])
  chat_id             BigInt
  bot_id              BigInt
  reply_to_message_id BigInt?
  date                Int
  message_type        MessageType
  content             String       @db.Text
  created_at          DateTime     @default(now())
  completions         Completion[]

  @@unique([chat_id, bot_id, message_id])
  @@index([chat_id, bot_id, message_type])
}

model Chat {
  id                   Int          @id @default(autoincrement())
  chat_id              BigInt
  bot_id               BigInt
  type                 ChatType
  title                String
  speak_chance         Float        @default(0)
  bot_name             String
  personality          String?      @db.Text
  first_message        String?      @db.Text
  model                String       @default("gpt-3.5-turbo")
  history_length       Int
  api_key              String?
  token_limit          Int
  temperature          Float
  frequency_penalty    Float
  presence_penalty     Float
  interact_with_bot_id BigInt       @default(0)
  messages             Message[]
  completions          Completion[]

  @@unique([chat_id, bot_id])
}

model User {
  id         Int       @id @default(autoincrement())
  user_id    BigInt    @unique
  is_bot     Boolean
  first_name String
  last_name  String?
  username   String?
  messages   Message[]

  @@index([user_id])
}
